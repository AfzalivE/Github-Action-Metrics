name: Collect Test Results

on:
  workflow_dispatch:  
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**' # If your frontend files are in a specific directory

jobs:
  collect-test-results:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run your Android unit tests
      - name: Run unit tests
        working-directory: ./android_project
        run: ./gradlew testDebugUnitTest

      # Start emulator
      - name: Start Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          emulator-options: '-no-boot-anim -no-window'
          disable-animations: true

      # Run your Android instrumented tests
      - name: Run Instrumented Tests
        id: instrumented_tests
        if: success()
        run: ./gradlew connectedDebugAndroidTest

      # Copy unit test results
      - name: Collect Unit Test Results
        if: always()
        run: |
          mkdir -p unit-test-results
          find . -type f -name "TEST-*.xml" -path "*build/test-results*" -exec cp {} unit-test-results/ \;

      # Copy androidTest results
      - name: Collect Android Test Results
        if: always()
        run: |
          mkdir -p android-test-results
          find . -type f -name "TEST-*.xml" -path "*build/outputs/androidTest-results*" -exec cp {} android-test-results/ \;

      # Parse unit test results
      - name: Parse Unit Test Results
        if: always()
        run: |
          python parse_test_results.py unit-test-results unitTest docs/unit_test_data.json

      # Parse androidTest results
      - name: Parse Android Test Results
        if: always()
        run: |
          python parse_test_results.py android-test-results androidTest docs/android_test_data.json

      # Commit and push the updated test_data.json
      - name: Commit Test Data
        if: ${{ always() }}
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add docs/unit_test_data.json docs/android_test_data.json
          git commit -m "Update test data"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
